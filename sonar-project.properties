# This is the SonarQube project key. This is a unique identifier for the project.
sonar.projectKey=Bazel_Cpp_Template

# This is the name of the project that will appear in the SonarQube dashboard.
sonar.projectName=Bazel_Cpp_Template

# This is the version of the project (usually your project version, e.g., 1.0, 2.0, etc.)
sonar.projectVersion=1.0

# The location of header files. By default, SonarQube looks for C++ header files in the `src` folder.
# You can modify this if your headers are in a different folder (e.g., `include`).
sonar.cxx.includeDirectories=inc

# Set the C++ compiler to use. SonarQube will use this to identify the compiler settings.
# Ensure that the compiler flags (e.g., -std=c++11) are appropriately set for your project.
sonar.cxx.compiler=g++ # or g++

# The location of the build output files (e.g., compiled binaries, object files).
# For instance, if you're using CMake, this might be the directory where CMake puts its build artifacts.
sonar.cxx.buildDir=bazel-bin

# Path to the `compile_commands.json` file generated by CMake or other build systems.
# Set this to the path where `compile_commands.json` is located. Usually, this is inside your build directory.
sonar.cfamily.compile-commands=compile_commands.json

# The location of the .git directory. This is used for version control information.
# If you use a different VCS, you can specify it here (e.g., svn).
sonar.scm.provider=git
sonar.scm.revision=refs/heads/main  # adjust for your default branch

# Optional: Set up exclusion for files or directories you don't want to analyze.
# For example, excluding all test files:
sonar.exclusions=**/test/**

# The location of the test source files (for unit tests, integration tests, etc.).
# Specify the directory containing your test source code.
sonar.tests=tests

# Optional: Set the encoding of the source files.
sonar.sourceEncoding=UTF-8

# Optional: Enable additional analysis for C++ code (static code analysis).
sonar.cxx.clangTidy.enabled=true # enable Clang-Tidy for additional linting
